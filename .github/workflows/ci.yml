name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Format check
        run: pnpm run format:check

    # Skip lint for now due to eslint config issues
    # - name: Lint
    #   run: pnpm run lint

  build:
    name: Build Extensions
    runs-on: ubuntu-latest
    needs: quality-checks

    strategy:
      matrix:
        browser: [chrome, firefox]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for ${{ matrix.browser }}
        run: pnpm run build:${{ matrix.browser }}

      - name: Create ${{ matrix.browser }} package
        run: pnpm run zip:${{ matrix.browser }}

      - name: Upload ${{ matrix.browser }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ matrix.browser }}
          path: extension-${{ matrix.browser }}.zip
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Chrome artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-chrome

      - name: Download Firefox artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-firefox

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: EnshitRadar ${{ steps.version.outputs.VERSION }}
          body: |
            ## ðŸš€ EnshitRadar ${{ steps.version.outputs.VERSION }}

            ### Downloads
            - **Chrome Extension**: Download `extension-chrome.zip` and load in Chrome
            - **Firefox Extension**: Download `extension-firefox.zip` and load in Firefox

            ### Installation Instructions

            #### Chrome
            1. Download `extension-chrome.zip`
            2. Unzip the file
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" (top right toggle)
            5. Click "Load unpacked" and select the unzipped folder

            #### Firefox
            1. Download `extension-firefox.zip`
            2. Open Firefox and go to `about:debugging`
            3. Click "This Firefox" in the sidebar
            4. Click "Load Temporary Add-on..."
            5. Select the `extension-firefox.zip` file

            ### What's Changed
            - See commit history for detailed changes

          draft: false
          prerelease: false
          files: |
            extension-chrome.zip
            extension-firefox.zip
